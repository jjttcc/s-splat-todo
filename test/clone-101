#!/bin/bash
# vim: sw=2 ts=2 expandtab
# Clone test

# family tree diagram for test:
#
#        A
#    /   |   \
#   B    C    D
#   |  /   \
#   E  F    G

setup() {
  create=create
  delete=delete
  clone=clone
  if [ "$TEST_REPL" ]; then
    create=repl_create
    delete=repl_delete
    clone=repl_clone
  fi
}

# (define env. var. STODO_KEEP_ARTIFACTS to force any new items to NOT
# be deleted.)

# Set "vars" for origination/creation.
set_main_vars() {
  ST_HANDLE=$testhndl
  ST_TYPE=$testtype
  ST_TITLE=$mainttl
  ST_PARENT=$intended_parent
  ST_DESC=$desc
  ST_EMAIL=$email
  ST_ATTACH="$attchs"
  ST_DTTIME='now'
}

clone_matches() {
  local origf=$1
  local clonef=$2
  orig_contents=$(grep -E -v '^children:|^handle:|^parent:' $origf)
  clone_contents=$(grep -E -v '^children:|^handle:|^parent:' $clonef)
  [ "$orig_contents" = "$clone_contents" ]
}

basedir=$(dirname $0)
toolsfile=$basedir/tools
testenv=$basedir/.env
if [ -r $testenv -a -f $testenv ]; then
  . $testenv
fi
if [ -r $toolsfile -a -f $toolsfile ]; then
  . $toolsfile
  init_tools
fi
if [ "$NO_ASSERT" ]; then
  unset ENABLE_ASSERTION
fi

# (Use file $testenv, sourced above, to set user_email.)
if [ "$ST_EMAIL" ]; then
  email="$ST_EMAIL"
else
  email="test@foo.invalid"
fi
firsthndl=test-stodo$$
secondhndl="new-hndl-$firsthndl"
ancestorA=ancestorA-test-stodo$$
parentB="parent-B-test-stodo$$"
parentC="parent-C-test-stodo$$"
parentD="parent-D-test-stodo$$"
childE="child-E-test-stodo$$"
childF="child-F-test-stodo$$"
childG="child-G-test-stodo$$"
cloneA="cloneA-test-stodo$$"
testtype=task
mainttl="remove-descendants-$$"
newttl="This is remove-descendants test number $$."
newttlregex="This.is.remove.*number"

setup
stodo starttran
testcount=0
successcount=0

### Create the family tree
testhndl=$ancestorA
set_main_vars
# Create the ancestor.
$create
intended_parent=$ancestorA
for testhndl in $parentB $parentC $parentD; do
  echo $testhndl
  set_main_vars
  # Create the target (child) item.
  $create
  if ! checkparent $testhndl $intended_parent; then
    echo "error: $intended_parent is not parent of $testhndl" >&2
  fi
done
intended_parent=$parentB
for testhndl in $childE; do
  echo $testhndl
  set_main_vars
  # Create the target (child) item.
  $create
  if ! checkparent $testhndl $intended_parent; then
    echo "error: $intended_parent is not parent of $testhndl" >&2
  fi
done
intended_parent=$parentC
for testhndl in $childF $childG; do
  echo $testhndl
  set_main_vars
  # Create the target (child) item.
  $create
  if ! checkparent $testhndl $intended_parent; then
    echo "error: $intended_parent is not parent of $testhndl" >&2
  fi
done
origfile=$(mktemp /tmp/orig$$.XXXXX)
stodo rep comp $parentC >$origfile
$clone $parentC $cloneA
orig_after_file=$(mktemp /tmp/orig-after$$.XXXXX)
clonefile=$(mktemp /tmp/clone$$.XXXXX)
stodo rep comp $parentC >$orig_after_file
stodo rep comp $cloneA >$clonefile

if ! check_no_children $cloneA; then
  echo "$cloneA incorrectly has children:" >&2
  echo -e "  \c"
  grep children: $clonefile >&2
else
  ((++successcount))
fi
((++testcount))

if ! checkchild $ancestorA $cloneA; then
  echo "error: $cloneA is not one of $ancestorA's children" >&2
else
  ((++successcount))
fi
((++testcount))

if ! checkparent $cloneA $ancestorA; then
  echo "error: $ancestorA is not parent of $cloneA" >&2
else
  ((++successcount))
fi
((++testcount))

if ! clone_matches $origfile $clonefile; then
  echo "Expected fields of $parentC and $cloneA do NOT match" >&2
else
  ((++successcount))
fi
((++testcount))

if ! diff $origfile $orig_after_file; then
  echo "$parentC was incorrectly changed by the clone process." >&2
else
  ((++successcount))
fi
((++testcount))

[ $successcount = $testcount ]
status=$?
$delete $ancestorA $parentB $parentC $parentD $childE $childF $childG $cloneA
stodo endtran
testreport $testcount $successcount
exit $status
