#!/bin/bash
# (define env. var. STODO_KEEP_ARTIFACTS to force any new items to NOT
# be deleted.)
# vim: expandtab ts=2 sw=2

setup() {
  create=create
  delete=delete
  modify=modify
  if [ "$TEST_REPL" ]; then
    create=repl_create
    delete=repl_delete
    modify=repl_modify
  fi
}

parse_args() {
  for arg; do
    if expr $arg : ".*@" >/dev/null; then
      email=$arg
    else
      testhndl=$arg$$
    fi
  done
}

create_test() {
  local result=0
  $create $testhndl
  if report $testhndl|awk 'BEGIN { hitcount = 0; EXPCOUNT = 5 }
    /handle: *'$testhndl'/ {  ++hitcount }
    /title: *'"$origttl"'/ {  ++hitcount }
    /email: *'$email'/ {  if (! emailset) { ++hitcount}; ++emailset }
    /description: *'"$desc"'/ {  ++hitcount }
    /type: *'$testtype'/ {  ++hitcount }
    END {
      if (hitcount != EXPCOUNT) {
        print "(expected " EXPCOUNT " matches, got: " hitcount ")"
        exit 1
      } else {
      exit 0
      }
    }'
  then
    echo "creation test SUCCEEDED"
  else
    echo "creation test FAILED"
    exit 99
  fi
  return $result
}

modify_test() {
  local result=0
  $modify $testhndl
  if report $testhndl|awk 'BEGIN { hitcount = 0; EXPCOUNT = 6 }
    /handle: *'$testhndl'/ {  ++hitcount }
    /title: *'"$newttlregex"'/ {  ++hitcount }
    /email: *'$email'/ {  if (! emailset) { ++hitcount}; ++emailset }
    /description: *'"$desc"'/ {  ++hitcount }
    /type: *'$testtype'/ {  ++hitcount }
    /priority: *'$newprio'/ {  ++hitcount }
    END {
      if (hitcount != EXPCOUNT) {
        print "(expected " EXPCOUNT " matches, got: " hitcount ")"
        exit 1
      } else {
        exit 0
      }
    }'
  then
    echo "modification test SUCCEEDED"
  else
    echo "modification test FAILED"
    result=98
  fi
  return $result
}

ac_delete_test() {
  local result=0
  if ! [ "$STODO_KEEP_ARTIFACTS" ]; then
    $delete $testhndl
    if report $testhndl|grep -q "$testhndl"; then
      echo "deletion test FAILED in deletion of $testhndl"
      result=97
    else
      echo "deletion test SUCCEEDED"
    fi
  else
      echo "deletion test bypassed (keeping new item with handle: $testhndl"
  fi
  return $result
}

# Set "vars" for origination/creation.
set_ovars() {
  ST_HANDLE=$testhndl
  ST_TYPE=$testtype
  ST_TITLE=$origttl
  ST_DESC=$desc
  ST_EMAIL=$email
}

# Set new "vars".
set_nvars() {
  ST_HANDLE=$testhndl
  ST_TITLE=$newttl
  ST_DESC=$desc
  ST_EMAIL=$email
  ST_PRIO=$newprio
}

basedir=$(dirname $0)
toolsfile=$basedir/tools
testenv=$basedir/.env
if [ -r $testenv -a -f $testenv ]; then
  . $testenv
fi
if [ -r $toolsfile -a -f $toolsfile ]; then
  . $toolsfile
  init_tools
fi
if [ "$NO_ASSERT" ]; then
  unset ENABLE_ASSERTION
fi

if [ $"ST_EMAIL" ]; then
  email="$ST_EMAIL"
else
  email="foo@foo.test"
fi
testhndl=test-stodo$$
testtype=task
origttl="original title"
desc='original, bland description'
newttl="This is title number $$.  It is long."
newttlregex="This.is.title.number.*It.is.long"
newprio=3

testcount=0
successcount=0
setup
parse_args $@
set_ovars
if create_test; then ((++successcount)); fi
((++testcount))
set_nvars
if modify_test; then ((++successcount)); fi
((++testcount))
if ac_delete_test; then ((++successcount)); fi
((++testcount))
[ $successcount = $testcount ]
allgood=$?
testreport $testcount $successcount
exit $allgood
