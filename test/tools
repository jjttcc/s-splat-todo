#!/bin/bash
# vim: ts=2 sw=2 expandtab

basedir=$(dirname $0)
repl=$basedir/../src/stodo_client_repl
user=$USER
appname=main

init_tools() {
  no_h=false
}

# For each environment variable v in: ST_HANDLE, ST_TITLE, ...; do
#   parse v and insert the result into environment variable STODO_OPTS
# end
set_opts_from_env() {
  STODO_OPTS=''
  if [ "$ST_HANDLE" ]; then
    if eval $no_h; then
      STODO_OPTS="$STODO_OPTS '$ST_HANDLE'"
    else
      STODO_OPTS="$STODO_OPTS -h '$ST_HANDLE'"
    fi
  fi
  if [ "$ST_TITLE" ]; then
    STODO_OPTS="$STODO_OPTS -t '$ST_TITLE'"
  fi
  if [ "$ST_DESC" ]; then
    STODO_OPTS="$STODO_OPTS -d '$ST_DESC'"
  fi
  if [ "$ST_EMAIL" ]; then
    STODO_OPTS="$STODO_OPTS -e '$ST_EMAIL'"
  fi
  if [ "$ST_PARENT" ]; then
    STODO_OPTS="$STODO_OPTS -p '$ST_PARENT'"
  fi
  if [ "$ST_PRIO" ]; then
    STODO_OPTS="$STODO_OPTS -pr '$ST_PRIO'"
  fi
  if [ "$ST_REFS" ]; then
    STODO_OPTS="$STODO_OPTS -r '$ST_REFS'"
  fi
  if [ "$ST_ATTACH" ]; then
    STODO_OPTS="$STODO_OPTS -at '$ST_ATTACH'"
  fi
  if [ "$ST_DTTIME" ]; then
    STODO_OPTS="$STODO_OPTS -ti '$ST_DTTIME'"
  fi
}

handle_exists() {
  [ "$ST_HANDLE" ]
}

type_exists() {
  [ "$ST_TYPE" ]
}

# Create a stodo item.
create() {
  if ! handle_exists; then
    echo "create: fatal: ST_HANDLE is not set." >&2
    return 3
  fi
  if ! type_exists; then
    echo "create: fatal: ST_TYPE is not set." >&2
    return 4
  fi
  set_opts_from_env
  eval stodo add $ST_TYPE $STODO_OPTS
}

# Create a stodo item using 'stodo_client_repl'.
repl_create() {
  if ! handle_exists; then
    echo "create: fatal: ST_HANDLE is not set." >&2
    return 3
  fi
  if ! type_exists; then
    echo "create: fatal: ST_TYPE is not set." >&2
    return 4
  fi
  set_opts_from_env
  echo add $ST_TYPE $STODO_OPTS|$repl $user $appname
}

repl_checkparent() {
  local h=$1 p=$2
  local output=$(echo "report complete $h" | $repl $user $appname)
  echo "$output" | grep -q "^Parent: *$p$"
}

repl_checkchild() {
  local prnt=$1 chld=$2
  result=101
  local output=$(echo "report complete $prnt" | $repl $user $appname)
  echo "$output" | grep -q "Children: *.*\<$chld\>"
  result=$?
  return $result
}

repl_check_no_children() {
  local hndl=$1
  result=101
  local output=$(echo "report complete $hndl" | $repl $user $appname)
  echo "$output" | grep -q 'Children: *$'
  result=$?
  return $result
}

specpath() {
    stodo set|awk '/^spec_path/ {print $NF}'
}

# Check that the item (handle $1) has the specified item (handle $2) as its
# parent.
checkparent() {
  local h=$1 p=$2
  stodo report comp $h|grep -q "^parent: *$p$"
}

checkchild() {
  local prnt=$1 chld=$2
  result=101
  stodo report comp $prnt|grep  -q "children: *.*\<$chld\>"
  result=$?
  return $result
}

# Check that $1 has no children.
check_no_children() {
  local hndl=$1
  result=101
  stodo report comp $hndl|grep  -q 'children: *$'
  result=$?
  return $result
}

hgrep() {
    if [ $# -lt 1 ]; then
        return 3
    fi
    expr=$1; shift
    stodo rep handle handle:$expr "$@"
}

report() {
  local hndl=$1
  if ! handle_exists; then
    echo "report: fatal: ST_HANDLE is not set." >&2
    return 7
  fi
  if [ ! "$hndl" ]; then
    no_h=true set_opts_from_env
    hndl=$ST_HANDLE
  fi
  if [ "$TEST_REPL" ]; then
    echo "report complete $hndl" | $repl $user $appname | sed -e "s/^> //g" -e '$s/\n*$//' -e '/^temporary-session-id/d'
  else
    eval stodo rep comp $hndl
  fi
}

repl_report() {
  local hndl=$1
  if ! handle_exists; then
    echo "report: fatal: ST_HANDLE is not set." >&2
    return 7
  fi
  if [ ! "$hndl" ]; then
    no_h=true set_opts_from_env
    hndl=$ST_HANDLE
  fi
  echo "report complete $hndl" | $repl $user $appname
}

modify() {
  if ! handle_exists; then
    echo "modify: fatal: ST_HANDLE is not set." >&2
    return 5
  fi
  no_h=true set_opts_from_env
  eval stodo change $STODO_OPTS
}

# Modify a stodo item using 'stodo_client_repl'.
repl_modify() {
  if ! handle_exists; then
    echo "modify: fatal: ST_HANDLE is not set." >&2
    return 5
  fi
  no_h=true set_opts_from_env
  echo change $STODO_OPTS | $repl $user $appname
}

# Usage: change_state <state-change-cmd> <handle>
change_state() {
  if [ $# -lt 2 ]; then
    echo "change_state: fatal: too few arguments ($*)"
  fi
  eval stodo stat $1 $2 $@
}

# Usage: change_state <state-change-cmd> <handle>
# Uses 'stodo_client_repl'.
repl_change_state() {
  if [ $# -lt 2 ]; then
    echo "change_state: fatal: too few arguments ($*)"
  fi
  echo change_state $1 $2 $@| $repl $user $appname
}

# Usage: delete <handle> ...
delete() {
  if [ $# -lt 1 ]; then
    echo "delete: fatal error: No handle specified."
    return 27
  fi
  if [ "$STODO_KEEP_ARTIFACTS" ]; then
    return 0
  fi
  eval stodo delete $*
}

# Delete a stodo item using 'stodo_client_repl'.
repl_delete() {
  if [ $# -lt 1 ]; then
    echo "delete: fatal error: No handle specified."
    return 27
  fi
  if [ "$STODO_KEEP_ARTIFACTS" ]; then
    return 0
  fi
  for handle; do
    echo delete $handle|$repl $user $appname
  done
}

# Usage: chhandle <handle1> <handle2>
chhandle() {
  if [ $# -lt 2 ]; then
    echo "chhandle: fatal error: missing arg(s)."
    return 28
  fi
  eval stodo chhandle $1 $2
}

# Usage: chhandle <handle1> <handle2>
# chhandle using 'stodo_client_repl'.
repl_chhandle() {
  if [ $# -lt 2 ]; then
    echo "chhandle: fatal error: missing arg(s)."
    return 29
  fi
  echo change_handle $1 $2 |$repl $user $appname
}

# Usage: clear_desc <hndlspec>
clear_desc() {
  if [ $# -lt 1 ]; then
    echo "clear_desc: fatal error: missing arg."
    return 28
  fi
  local hndlspec=$1;shift
  eval stodo clear_d "$hndlspec" $@
}

# Usage: repl_clear_desc <hndlspec>
# clear_desc using 'stodo_client_repl'.
repl_clear_desc() {
  if [ $# -lt 1 ]; then
    echo "clear_desc: fatal error: missing arg."
    return 29
  fi
  local hndlspec=$1;shift
  echo clear_descendants "$hndlspec" $@ | $repl $user $appname
}

remove_desc() {
  if [ $# -lt 2 ]; then
    echo "chhandle: fatal error: missing arg(s)."
    return 29
  fi
  eval stodo remove_d $1 $2
}

repl_remove_desc() {
  if [ $# -lt 2 ]; then
    echo "chhandle: fatal error: missing arg(s)."
    return 29
  fi
  echo remove_descendant $1 $2 | $repl $user $appname
}

clone() {
  if [ $# -lt 2 ]; then
    echo "chhandle: fatal error: missing arg(s)."
    return 30
  fi
  stodo clone $1 $2
}

repl_clone() {
  if [ $# -lt 2 ]; then
    echo "chhandle: fatal error: missing arg(s)."
    return 31
  fi
  echo clone $1 $2|$repl $user $appname
}

delete_test() {
  local result=0
  local handle=$1
  if [ ! "$handle" ]; then
      result=3
  else
      if ! [ "$STODO_KEEP_ARTIFACTS" ]; then
          delete $handle
          if report $handle|grep -q "$handle"; then
              echo "deletion test FAILED in deletion of $handle"
              result=97
          else
              echo "deletion test (of $handle) SUCCEEDED"
          fi
      else
          echo "deletion test bypassed (keeping new item with handle: $handle"
      fi
  fi
  return $result
}

testreport() {
  local tcount=$1
  local succcount=$2
  if [ $tcount = $succcount ]; then
    echo "All ($tcount) tests SUCCEEDED." >&2
  else
    echo -e "$tcount tests:\n   SUCCESSFUL tests: $succcount" >&2
    echo -e "   FAILED tests: $(expr $tcount - $succcount)" >&2
  fi
}
