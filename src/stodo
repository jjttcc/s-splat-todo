#!/usr/bin/env bash

progname=$(basename $0)
stodopath=$(dirname $0)
initproc=main/initial-processing.rb
notifyproc=main/ongoing-processing.rb
mktmpl=main/stodo-template.rb
report=main/report.rb
edit=main/stodo-mgmt.rb
admin=main/stodo-admin.rb
stodo_envpath="$STODO_PATH"


mainhelp() {
    gap="    "
    echo -e "Usage: $progname <command>\n\ncommands:"
    echo -e "  help [<x>]${gap}     show help (on topix <x>, if provided)"
    echo -e "  new|init ${gap}      look for and process new to-do items"
    echo -e "  notify ${gap}        send pending notifications to-do items"
    echo -e "  combined${gap}       combine notifications with processing of \c"
    echo -e "new items"
    echo -e "  report ${gap}        display a report of existing to-do items"
    echo -e "  del <h>...${gap}     delete targets with handles <h>, ..."
    echo -e "  stat <x> <h>...${gap}change status of handles <h>, ... to \c"
    echo -e "state-change <x>"
    echo -e "  temp [<type>]${gap}  output a to-do item template \c"
    echo -e "(for target type <type>)"
    echo -e "  backup ${gap}        back up data files"
}

indepth_help() {
    case "$1" in
      rep*) report_help ;;
      temp*) template_help ;;
      sta*) state_help ;;
    esac
}

help() {
  if [ $# == 0 ]; then
    mainhelp
  else
    indepth_help $*
  fi
}

set_rubylib() {
    moredirs="facility error configuration notification specs data"
    moredirs="$moredirs coordination util"
    rubylib="RUBYLIB=$STEXEC_PATH/core"
    for d in $moredirs; do
        rubylib="$rubylib:$STEXEC_PATH/$d"
    done
}

checkpath() {
    for f in $*; do
        STEXEC_PATH=
        for p in $stodopath $stodo_envpath; do
            if [ -x "$p/$f" ]; then
                STEXEC_PATH=$p
            fi
        done
        if [ -z "$STEXEC_PATH" ]; then
            echo "Error: file $f not found"
            exit 11
        fi
    done
    if [ -z "$rubylib" ]; then
        set_rubylib
    fi
}

run() {
    cmd=$1; shift
    eval $rubylib $STEXEC_PATH/$cmd $*
}

process_new_items() {
    checkpath $initproc
    run $initproc
}

process_notifications() {
    checkpath $notifyproc
    run $notifyproc
}

do_combined_processing() {
    checkpath $initproc $notifyproc
    run $initproc
    sleep 1
    run $notifyproc
}

do_report() {
    checkpath $report
    run $report $*
}

do_edit() {
    checkpath $edit
    run $edit $*
}

do_backup() {
    checkpath $admin
    run $admin backup $*
}

make_template() {
    checkpath $mktmpl
    run $mktmpl $*
}

report_help() {
    echo -e "Usage: $progname rep[ort] [<report-type> [handle ...]]"
    echo -e "\nWhere <report-type> is one of:"
    echo -e "  short        short report - list only handles and titles"
    echo -e "  summary      summary report for the specified handles"
    echo -e "  complete     complete report for the specified handles"
    echo -e "  due          pending items with their \"due\" date"
    echo -e "  remind       upcoming (first) reminder"
    echo -e "  remindh      upcoming (first) reminder" \
        "(with handle instead of title)"
    echo -e "  remindall    all upcoming reminders"
    echo -e "  children     report of all child relationships"
    echo -e "\n(If <report-type> is not specified, list all target handles.)"
}

template_help() {
    echo -e "Usage: $progname temp [<type>]"
    echo -e "Where <type> is one of:\c"
    echo -e " task, memo, appointment (or event), project"
    echo -e "\n(If <type> is not specified, assume 'task'.)"
}

state_help() {
    echo -e "Usage: $progname stat[us] <state-change>"
    echo -e "  Where <state-change> is one of:\c"
    echo -e "  cancel, resume, finish, suspend"
    echo -e "  with the following possible state changes:\n"
    echo -e "   current state | state-change | new state"
    echo -e "  -------------------------------------------"
    echo -e "  'in-progress'  | cancel       | 'canceled'"
    echo -e "  'in-progress'  | suspend      | 'suspended'"
    echo -e "  'in-progress'  | finish       | 'completed'"
    echo -e "  'suspended'    | resume       | 'in-progress'"
    echo -e "  'suspended'    | cancel       | 'canceled'"
}

case $1 in
    new|init) process_new_items
        ;;
    noti*) process_notifications
        ;;
    comb*) do_combined_processing
        ;;
    rep*) shift; do_report $*
        ;;
    del*)
      shift;
      do_edit delete $*
        ;;
    sta*)
      shift;
      new_state=$1; shift
      do_edit state:$new_state $*
        ;;
    temp*) shift; make_template $*
        ;;
    back*) shift; do_backup $*
        ;;
    *) shift; help $*
        ;;
esac
