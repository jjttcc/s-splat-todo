#!/usr/bin/env bash

progname=$(basename $0)
stodopath=$(dirname $0)
initproc=main/initial-processing.rb
notifyproc=main/ongoing-processing.rb
mktmpl=main/stodo-template.rb
report=main/report.rb
edit=main/stodo-mgmt.rb
admin=main/stodo-admin.rb
stodo_envpath="$STODO_PATH"
specpath_expr='^# *spec-path:'


mainhelp() {
    gap="    "
    smgap="   "
    longgap="                     "
    echo -e "Usage: $progname <command>\n\ncommands:"
    echo -e "  help [<x>]${gap}     show help (on topic <x>, if provided)"
    echo -e "  new|init ${gap}      look for and process new or changed \c"
    echo "to-do items"
    echo -e "  notify ${gap}        send pending notifications to-do items"
    echo -e "  combined${gap}       combine notifications with processing of \c"
    echo -e "new items"
    echo -e "  report ${gap}        display a report of existing to-do items"
    echo -e "  chparent <h> <ph>  change parent of the item with handle <h> \c"
    echo -e "to be the\n${longgap}item with handle <ph>. If <ph> is '{none}',"
    echo -e "${longgap}the item is set as parentless."
    echo -e "  chhandle <h> <nh>  change handle of the item with handle <h> \c"
    echo -e "to <nh>"
    echo -e "  change <h>         change attribute(s) of item with handle <h>"
    echo -e "  add       ${gap}     add a new item"
    echo -e "  del       ${gap}     delete the specified items"
    echo -e "  clear_d <h>...${gap} clear descendants of items with \c"
    echo -e "handle specs <h>, ..."
    echo -e "  remove_d <h> <dh>  find descendant (handle <dh>) \c"
    echo -e "of ancestor (handle <h>)\n${longgap}and delete it"
    echo -e "  clone <h> <nh> ${gap}clone item with handle <h> \c"
    echo -e "as a new item with handle <nh>"
    echo -e "  stat <x> <h>...${gap}change status of handles <h>, ... to \c"
    echo -e "state-change <x>"
    echo -e "  set[tings]     ${gap}show current configuration/Settings"
    echo -e "  temp [<type> ...]  output a to-do item Template \c"
    echo -e "(for target type <type>)"
    echo -e "  backup [opts] ${gap} back up data files"
    echo -e "  proca <h>...       process attachments for items with \c"
    echo -e "handles <h>..."
    echo -e "  git-<cmd>          perform the specified 'git' operation: \c"
    echo -e "<cmd>"
    echo -e "  version            print Version number and exit"
}

indepth_help() {
  case "$1" in
    rep*) report_help ;;
    add*) add_help ;;
    del*) delete_help ;;
    git*) git_help ;;
    change*) change_help ;;
    clear*) clear_d_help ;;
    temp*) template_help ;;
    sta*) state_help ;;
    admin) admin_help ;;
    back*) backup_help ;;
    proca*) process_attachment_help ;;
  esac
}

help() {
  if [ $# == 0 ]; then
    mainhelp
  else
    indepth_help $*
  fi
}

set_rubylib() {
  moredirs="facility error configuration notification specs data"
  moredirs="$moredirs coordination util attributes"
  rubylib="RUBYLIB=$STEXEC_PATH/core"
  for d in $moredirs; do
    rubylib="$rubylib:$STEXEC_PATH/$d"
  done
  eval export $rubylib
}

checkpath() {
  for f in $*; do
    STEXEC_PATH=
    for p in $stodopath $stodo_envpath; do
      if [ -x "$p/$f" ]; then
        STEXEC_PATH=$p
      fi
    done
    if [ -z "$STEXEC_PATH" ]; then
      echo "Error: file $f not found"
      exit 11
    fi
  done
  if [ -z "$rubylib" ]; then
    set_rubylib
  fi
}

# If env. var. ST_RM_EXTRN (i.e., "stodo remove extraneous [files]") is
# not empty, remove (unconditionally - 'rm -f ...') the specified file ($1).
# If env. var. ST_VERBOSE is not empty, do not suppress any stderr output
# from the removal attempt and return the exit value of the 'rm' command;
# otherwise, suppress all output and return the default value (0).
# If env. var. ST_RM_EXTRN is empty or nonexistent, perform a null op -
# i.e., simply return with success status (0).
conditionally_remove_file() {
  local target=$1
  local result=0
  if [ "$ST_RM_EXTRN" ]; then
    if [ "$ST_VERBOSE" ]; then
      rm -f $target
      result=$?
    else
      rm -f $target 2>/dev/null
    fi
  fi
  return $result
}

run() {
  cmd=$1; shift
  $RUBY_EXEC $STEXEC_PATH/$cmd "$@"
  status=$?
  if [ $status -ne 0 ]; then
    echo "command failed [$RUBY_EXEC $STEXEC_PATH/$cmd $@]" >&2
    exit $status
  fi
}

process_new_items() {
  checkpath $initproc
  run $initproc
}

process_notifications() {
  checkpath $notifyproc
  run $notifyproc
}

do_combined_processing() {
  checkpath $initproc $notifyproc
  run $initproc
  sleep 1
  run $notifyproc
}

do_report() {
  checkpath $report
  modded_args=
  case $1 in
    -a*) shift; modded_args=$1:ignore; shift
      ;;
    -p*) shift; modded_args=$1:inprog; shift
      ;;
    -*) shift
      ;;
  esac
  run $report $modded_args "$@"
}

do_edit() {
  checkpath $edit
  run $edit $*
}

do_quoted_edit() {
  checkpath $edit
  run $edit "$@"
}

do_backup() {
  checkpath $admin
  run $admin backup $*
}

print_version() {
  checkpath $admin
  run $admin version
}

print_settings() {
  checkpath $admin
  run $admin settings
}

install_specfile() {
  file=$1
  specpath=$(awk "/$specpath_expr/"'{print $NF}' $file)
  if [ "$specpath" ]; then
    echo "Installing $file to $specpath" >&2
    mv $file $specpath || {
      status=$?
      echo "Error: Move of $file to $specpath failed." >&2
    }
  fi
  return $status
}

# Create the template contents.  If env. var. EDITOR is not empty, invoke
# $EDITOR to allow the user to edit the contents in a temporary file and
# "install" it by calling install_specfile on the file.  Otherwise, simply
# output the template contents to stdout.
# If env. var. ST_RM_EXTRN (standing for "stodo remove extraneous [files]")
# is not empty, ensure that any temporary files created by this procedure
# are removed.
make_template() {
  checkpath $mktmpl
  type=$1
  case $type in
    -*) type=task
      ;;
    *) shift
      ;;
  esac
  if [ -w . ]; then
    outfile=$(mktemp $type.XXXX)
    run $mktmpl $type "$@" >$outfile
    if [ "$EDITOR" ]; then
      if $EDITOR $outfile; then
        install_specfile $outfile
      fi
    else
      cat $outfile
    fi
    conditionally_remove_file $outfile
    exit $?
  else
    run $mktmpl "$@"
  fi
}

# Pre-process "proca" arguments/options
# (Set the specified handles to $proca_handles and set/export
# ST_ATTCH_ACTION as 'view' [i.e., default] unless the '-e' option is
# present, in which case set/export ST_ATTCH_ACTION as 'edit'.
pre_process_attachments() {
  export ST_ATTCH_ACTION=view
  proca_handles=
  for arg; do
    case $arg in
      -v*) ;;
      -e*) ST_ATTCH_ACTION=edit ;;
      *) proca_handles="$proca_handles $arg" ;;
    esac
  done
}

report_help() {
  local s='        '
  local long_s="$s$s      "
  echo -e "Usage: $progname rep[ort] [<report-type> [<criteria>]]"
  echo -e "\nWhere <report-type> is one of:"
  echo -e "  handle $s     list only matching handles"
  echo -e "  desc   $s     display only the description"
  echo -e "  tdesc  $s     display only title and description"
  echo -e "  short $s      short report - list only handles and titles"
  echo -e "  summary $s    summary report for the specified handles"
  echo -e "  complete $s   complete report for the specified handles"
  echo -e "  due $s        pending items with their \"due\" date"
  echo -e "  remind $s     upcoming (first) reminder"
  echo -e "  remindh $s    upcoming (first) reminder" \
    "(with handle instead of title)"
  echo -e "  remindall $s  all upcoming reminders"
  echo -e "  children $s   report of all child relationships"
  echo -e "  parent   $s   report the parent handle"
  echo -e "  emanc-chld $s \"emancipated\" children - i.e., that don't" \
    "\"acknowledge\"\n${long_s}the designated item as their parent"
  echo -e "  emanc-desc $s all descendants of the designated item that are" \
    "\n$s$s      emancipated children"
  echo -e "Where <criteria> is either:"
  echo -e "  <type-spec>"
  echo -e "  <space-separated list of handles> - e.g., handle1 handle2 ..."
  echo -e "<type-spec> - one or more of the following, separated by '@':"
  echo -e "  pri:<n1>[,<n2>[,...]]  - only priorities <n1>, <n2>, ..."
  echo -e "  stat:<s1>[,<s2>[,...]] - only statuses <s1>, <s2>, ..."
  echo -e "  type:<t1>[,<t2>[,...]] - only types <t1>, <t2>, ..."
  echo -e "  title:<regex>          - only items whose title matches <regex>"
  echo -e "  handle:<regex>         - only items whose handle matches <regex>"
  echo -e "  descr:<regex>          - only items whose description matches "\
    "<regex>"
  echo -e "\nNotes:"
  echo -e "   If <report-type> is not specified, list all target handles."
  echo -e "   The type can be any of:."
  echo -e '      "task", "note" or "memo", "appointment" or "event", "project"'
}

add_help() {
  local s='     '
  local ls='                    '
  echo -e "Usage: $progname add <type> -h <handle> [other-options]"
  echo -e "Where <type> is one of:\c"
  echo -e " task, memo, appointment (or event), project"
  echo -e "(If <type> is not specified, assume 'task'.)"
  echo -e "\nOther-options:"
  echo -e "  -t <title> $s     use <title> as the Title"
  echo -e "  -d <desc> $s      use <desc> as the Description"
  echo -e "  -c <cat>... $s    use <cat>... as the Category/Categories"
  echo -e "  -e <email> $s     use <email> as the Email address"
  echo -e "  -ti <datetime>$s  use <datetime> as the date&time"
  echo -e "  -ie <email> $s    use <email> as the Initial Email address"
  echo -e "  -oe <email> $s    use <email> as the Ongoing Email address"
  echo -e "  -p <handle> $s    use <handle> to specify the Parent"
  echo -e "  -ci <id>... $s    use <id>... as the Calendar Ids"
  echo -e "  -l <loc> $s       use <loc> as the location (appointment only)"
  echo -e "  -du <dur> $s      use <dur> as the duration (appointment only)"
  echo -e "  -pr <priority> $s use <priority> as the priority"
  echo -e "  -at <a1>[,<a2>...]   use <a1>,... to create an"\
    "\"attachments\" line"
  echo -e "  -r <r1>[,<r2>...]    use <r1>,... to create a"\
    "line of \"references\"\n${ls}   (handles) to existing items"
  echo -e "  -rem <remspec>$s  set REMinder(s) as specified by <remspec>"
  echo -e "  -m <msg>$s        add item to git and use <msg> as commit Message"
  echo -e "\nNotes:"
  echo -e "   <remspec>$s$s <expr1>[;<expr2>...]"
}

delete_help() {
  local s='        '
  echo -e "Usage: $progname del <handle>... [options]"
  echo -e "\nOptions:"
  echo -e "  -r              Recursive: delete all descendants as well"
  echo -e "  -m <msg>        use <msg> as commit Message if items are in git"
}

git_help() {
  local s='      '
  local ms="$s$s$s  "
  local ls="$s$s$s$s"
  echo -e "Usage: $progname git-<cmd> <h>... [options]"
  echo -e "\nCommand (git-<cmd>):"
  echo -e "  git-list              List handles of items in git repo"
  echo -e "  git-add <h>... $s Add/update and commit the items with handles\c"
      echo -e " <h>...\n${ls}to/in the git repository"
  echo -e "  git-log <h>...        display the Log for <h>..."
  echo -e "  git-ret <id> <h>...   Retrieve the specified commit, \c"
  echo -e "according to <id>\n$ls(commit id), of the \c"
  echo -e "specified items (<h>...) from the\n${ls}git repository \c"
  echo -e "and print their contents to stdout"
  echo -e "Options:"
  echo -e "  -r${ms}Recursive: apply <cmd> to all descendants as well"
  echo -e "  -m <msg> $s$s use <msg> as the commit Message"
}

admin_help() {
  local gap="    "
  local lgap="$gap${gap}${gap}${gap}${gap} "
  local desc_clean_help=\
"for each child, c, of item, i (whose handle is <h>) if"\
"\n${lgap}c.parent_handle "\
"is either blank or identifies an item\n${lgap}other than i, remove c as "\
"one of i's children. Perform\n${lgap}this same operation recursively on all "\
"of i's children."
  echo -e "stodo administration commands:"
  echo -e "  settings           show configured settings"
  echo -e "  readopt <h>... ${gap}re-\"adopt\" emancipated descendants \c"
  echo -e "of the items with\n${lgap}handles <h>..."
  echo -e "  desc_clean <h>...  $desc_clean_help"
}

backup_help() {
  local s='        '
  echo -e "Usage: $progname backup [options]"
  echo -e "\nOptions:"
  echo -e "  tmp|temp $s  make an ad hoc, \"temporary\" backup"
}

change_help() {
  local s='        '
  local ls='                    '
  echo -e "Usage: $progname change <handle> [options]"
  echo -e "\nOptions:"
  echo -e "  -t <title> $s  replace the Title with <title>"
  echo -e "  -d <desc> $s   replace the Description with <desc>"
  echo -e "  -ad <s>   $s   Append <s> to the Description"
  echo -e "  -c <cat>... $s replace Categories with <cat[,<cat>...]>"
  echo -e "  -e <email> $s  replace the ongoing Email address with <email>"
  echo -e "  -ti <datetime>       replace the <datetime> with date&time"
#!!!  echo -e "  -ci <id>... $s replace the Calendar Ids with <id>..."
  echo -e "  -l <loc> $s    replace the Location (appointment only) with <loc>"
  echo -e "  -du <dur> $s   replace the Duration (appointment only) with <dur>"
  echo -e "  -pr <priority>       replace the Priority with <priority>"
  echo -e "  -at <a1>[,<a2>...]   use <a1>,... to assign a new"\
    "\"Attachments\" line"
  echo -e "  -r <r1>[,<r2>...]    use handles <r1>,... to assign a new"\
    "line of\n${ls}   \"references\" to existing items"
  echo -e "  -rem <remspec>       replace REMinder(s) with <remspec>"
  echo -e "  -arem <remspec>      append <remspec> to REMinder(s)"
  echo -e "  -m <msg> $s    use <msg> as commit Message if item is in git"
  echo -e "\nNotes:"
  echo -e "   <remspec>$s   <date/time-expr1>[;<date/time-expr2>...]"
}

clear_d_help() {
  local s='   '
  echo -e "Usage: $progname clear_d[escendants] <hndlspec>..."
  echo -e "\nWhere <hndlspec> is:"
  echo -e "  <hnd1>[:<hnd2>[:...]] remove all descendants for <hnd1> except for"
  echo -e "                        those whose handles match <hnd2>, etc. -"
  echo -e "                        i.e., treat the specified handles \c"
  echo -e "(<hnd2>...)"
  echo -e "                        as exceptions that should not be removed."
}

template_help() {
  local s='     '
  local ls='                    '
  echo -e "Usage: $progname temp [<type>] [options]"
  echo -e "Where <type> is one of:\c"
  echo -e " task, memo, appointment (or event), project"
  echo -e "(If <type> is not specified, assume 'task'.)"
  echo -e "\nOptions:"
  echo -e "  -t <title> $s     use <title> as the Title"
  echo -e "  -h <handle> $s    use <handle> as the Handle"
  echo -e "  -d <desc> $s      use <desc> as the Description"
  echo -e "  -c <cat>... $s    use <cat>... as the Category/Categories"
  echo -e "  -e <email> $s     use <email> as the Email address"
  echo -e "  -ti <datetime>$s  use <datetime> as the date&time"
  echo -e "  -ie <email> $s    use <email> as the Initial Email address"
  echo -e "  -oe <email> $s    use <email> as the Ongoing Email address"
  echo -e "  -p <handle> $s    use <handle> to specify the Parent"
  echo -e "  -ci <id>... $s    use <id>... as the Calendar Ids"
  echo -e "  -l <loc> $s       use <loc> as the location (appointment only)"
  echo -e "  -du <dur> $s      use <dur> as the duration (appointment only)"
  echo -e "  -pr <priority> $s use <priority> as the priority"
  echo -e "  -at <a1>[,<a2>...]   use <a1>,... to create an"\
    "\"Attachments\" line"
  echo -e "  -r <r1>[,<r2>...]    use handles <r1>,... to create a"\
    "line of \"references\"\n${ls}   to existing items"
}

state_help() {
  echo -e "Usage: $progname stat[us] <state-change> <handle>..."
  echo -e "  Where <state-change> is one of:\c"
  echo -e "  cancel, resume, finish, suspend"
  echo -e "  with the following possible state changes:\n"
  echo -e "   current state | state-change | new state"
  echo -e "  -------------------------------------------"
  echo -e "  'in-progress'  | cancel       | 'canceled'"
  echo -e "  'in-progress'  | suspend      | 'suspended'"
  echo -e "  'in-progress'  | finish       | 'completed'"
  echo -e "  'suspended'    | resume       | 'in-progress'"
  echo -e "  'suspended'    | cancel       | 'canceled'"
}

process_attachment_help() {
  local s='     '
  local ls='                    '
  echo -e "Usage: $progname proca <handle> [...] [options]"
  echo -e "\nOptions:"
  echo -e "  -v $s \"view\" the attachment (i.e., read-only) [default]"
  echo -e "  -e $s \"edit\" (modify) the attachment"
}

case $1 in
  new|init) process_new_items     # (might cause git-action - repo change)
    ;;
  noti*) process_notifications
    ;;
  comb*) do_combined_processing   # (might cause git-action - repo change)
    ;;
  rep*) shift; do_report "$@"
    ;;
  del*)                           # (might cause git-action - repo change)
    shift;
    do_quoted_edit delete "$@"
    ;;
  add*)
    shift;
    do_quoted_edit add "$@"
    ;;
  change*)                        # (might cause git-action - repo change)
    shift;
    do_quoted_edit change_item "$@"
    ;;
  chpar*)                         # (might cause git-action - repo change)
    shift;
    do_quoted_edit change_parent "$@"
    ;;
  chhan*)                         # (might cause git-action - repo change)
    shift;
    do_quoted_edit change_handle "$@"
    ;;
  clear?d*)                       # (might cause git-action - repo change)
    shift;
    do_quoted_edit clear_descendants "$@"
    ;;
  remove?d*)                      # (might cause git-action - repo change)
    shift;
    do_quoted_edit remove_descendant "$@"
    ;;
  clon*)
    shift;
    do_quoted_edit clone "$@"
    ;;
  sta*)                           # (might cause git-action - repo change)
    shift;
    new_state=$1; shift
    do_quoted_edit state:$new_state "$@"
    ;;
  temp*) shift; make_template "$@"
    ;;
  back*) shift; do_backup $*
    ;;
  proca*)
    shift;
    pre_process_attachments $*
    do_report attach $proca_handles
    ;;
  git-l[is]*|gitl[is]*)           # (will cause git-action - NO repo change)
    shift
    do_report git-list "$@"
    ;;
  git-lo*|gitlo*)                 # (will cause git-action - NO repo change)
    shift
    do_report git-log "$@"
    ;;
  git-add|gitadd)                 # (will cause git-action - repo change)
    shift
    do_quoted_edit git-add "$@"
    ;;
  git-re*|gitre*)                 # (will cause git-action - NO repo change)
    shift
    id=$1; shift
    ST_COMMIT_ID="$id" do_report git-ret "$@"
    ;;
  set*)
    shift;
    print_settings
    ;;
  read*)
    shift;
    do_edit re_adopt_descendants $*
    ;;
  desc_cl*)
    shift;
    do_edit remove_false_children $*
    ;;
  v*|-v)
    print_version
    ;;
  *) shift; help $*
    ;;
esac

exit $?
